# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ACR7TLvYer9edlyfz3ddu3aByHoyw3GC
"""

!pip install gradio transformers

from transformers import pipeline
import gradio as gr

# Load model from Hugging Face (granite-3.3-2b-instruct)
qa_pipeline = pipeline("text-generation", model="ibm-granite/granite-3.3-2b-instruct")

def ask_model(question):
    response = qa_pipeline(question, max_new_tokens=200, do_sample=True)
    return response[0]["generated_text"]

with gr.Blocks() as demo:
    gr.Markdown("## ü§ñ IBM Granite AI ‚Äì Q&A / Quiz / Debug Assistant")

    input_box = gr.Textbox(label="Enter your question / code / quiz", placeholder="Ask me anything...")
    output_box = gr.Textbox(label="Answer")

    submit_btn = gr.Button("Ask")

    submit_btn.click(fn=ask_model, inputs=input_box, outputs=output_box)

demo.launch(share=True)

!pip install gradio transformers pypdf

import gradio as gr
from transformers import pipeline
from pypdf import PdfReader

# Load model
model = pipeline("text-generation", model="ibm-granite/granite-3.3-2b-instruct")

pdf_text = ""  # global storage for PDF content

# ---------------- File Upload ----------------
def upload_pdf(file):
    global pdf_text
    pdf_text = ""
    reader = PdfReader(file.name)
    for page in reader.pages:
        pdf_text += page.extract_text()
    return "‚úÖ PDF Uploaded Successfully!"

# ---------------- Q&A ----------------
def ask_pdf(question):
    if not pdf_text:
        return "‚ö†Ô∏è Please upload a PDF first."
    prompt = f"Answer this based on the document:\n{pdf_text[:2000]}\n\nQuestion: {question}\nAnswer:"
    response = model(prompt, max_new_tokens=200, do_sample=True)
    return response[0]["generated_text"]

# ---------------- Summarizer ----------------
def summarize_pdf():
    if not pdf_text:
        return "‚ö†Ô∏è Upload a PDF first."
    prompt = f"Summarize this document:\n{pdf_text[:3000]}"
    response = model(prompt, max_new_tokens=250, do_sample=True)
    return response[0]["generated_text"]

# ---------------- Flashcards ----------------
def generate_flashcards():
    if not pdf_text:
        return "‚ö†Ô∏è Upload a PDF first."
    prompt = f"Extract key points and create flashcards from this document:\n{pdf_text[:3000]}"
    response = model(prompt, max_new_tokens=300, do_sample=True)
    return response[0]["generated_text"]

# ---------------- Quiz ----------------
def generate_quiz():
    if not pdf_text:
        return "‚ö†Ô∏è Upload a PDF first."
    prompt = f"Generate 5 quiz questions (MCQ or short answer) from this document:\n{pdf_text[:3000]}"
    response = model(prompt, max_new_tokens=300, do_sample=True)
    return response[0]["generated_text"]

# ---------------- Debugger ----------------
def debug_code(code):
    prompt = f"Debug this code and suggest fixes:\n{code}"
    response = model(prompt, max_new_tokens=200, do_sample=True)
    return response[0]["generated_text"]

# ---------------- Gradio Interface ----------------
with gr.Blocks() as demo:
    gr.Markdown("## üìö StudyMate++ ‚Äì AI Assistant")

    with gr.Tab("Upload PDF"):
        upload_btn = gr.File(label="Upload PDF", file_types=[".pdf"])
        upload_output = gr.Textbox()
        upload_btn.upload(upload_pdf, inputs=upload_btn, outputs=upload_output)

    with gr.Tab("Q&A"):
        q_in = gr.Textbox(label="Ask a Question from PDF")
        q_out = gr.Textbox(label="Answer")
        gr.Button("Ask").click(ask_pdf, inputs=q_in, outputs=q_out)

    with gr.Tab("Summarize"):
        s_out = gr.Textbox(label="Summary")
        gr.Button("Summarize PDF").click(summarize_pdf, outputs=s_out)

    with gr.Tab("Flashcards"):
        f_out = gr.Textbox(label="Flashcards (Q&A style)")
        gr.Button("Generate Flashcards").click(generate_flashcards, outputs=f_out)

    with gr.Tab("Quiz"):
        quiz_out = gr.Textbox(label="Quiz")
        gr.Button("Generate Quiz").click(generate_quiz, outputs=quiz_out)

    with gr.Tab("Debugger"):
        code_in = gr.Textbox(label="Paste your code here")
        debug_out = gr.Textbox(label="Debugging Suggestions")
        gr.Button("Debug").click(debug_code, inputs=code_in, outputs=debug_out)

demo.launch(share=True)